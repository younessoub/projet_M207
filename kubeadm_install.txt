1 - sudo swapoff -a
  - comment swap line in /etc/fstab
# Disable swap temporarily (required by Kubernetes). Also disable swap permanently by commenting it in /etc/fstab.

2 - Install Docker engine https://docs.docker.com/engine/install/ubuntu/
# Install Docker engine following the official Docker Ubuntu installation guide.

3 - sudo chmod 646 /etc/containerd/config.toml
# Change permissions of the containerd config file to allow editing.

4 - containerd config default > /etc/containerd/config.toml
# Generate default containerd configuration and overwrite the config file.

5 - sudo nano /etc/containerd/config.toml  
    change "SystemdCgroup = false" to "SystemdCgroup = true" 
    change "sandbox_image = "registry.k8s.io/pause:3.8" to "sandbox_image = "registry.k8s.io/pause:3.10"
    save the file and exit
# Edit containerd config: enable systemd cgroup driver and update sandbox image version, then save changes.

6 - sudo systemctl restart containerd
# Restart containerd to apply new configuration.

7 - sudo apt-get update
# Update package lists.

8 - sudo apt-get install -y apt-transport-https ca-certificates curl gpg
# Install packages required for Kubernetes repo management.

9 - curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
# Download and add Kubernetes repository signing key.

10 - echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
# Add Kubernetes repository to apt sources.

11 - sudo apt-get update
# Update package lists with the new Kubernetes repo.

12 - sudo apt-get install -y kubelet kubeadm kubectl
# Install Kubernetes components.

13 - sudo apt-mark hold kubelet kubeadm kubectl
# Prevent automatic updates of Kubernetes components.

14 - sudo systemctl enable --now kubelet
# Enable and start kubelet service.

15 - kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=<master-node-ip>
# Initialize the Kubernetes control plane with specified pod network and API server IP.

16 - mkdir -p $HOME/.kube
# Create kube config directory for the current user.

17 - sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
# Copy admin kubeconfig file to user directory.

18 - sudo chown $(id -u):$(id -g) $HOME/.kube/config
# Change ownership of kubeconfig file to current user.

19 - sudo modprobe br_netfilter
# Load br_netfilter kernel module required for networking.

20 - echo "br_netfilter" | sudo tee /etc/modules-load.d/k8s.conf
# Ensure br_netfilter module loads on boot.

21 - cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
     net.bridge.bridge-nf-call-iptables  = 1
     net.ipv4.ip_forward                 = 1
     net.bridge.bridge-nf-call-ip6tables = 1
     EOF
# Configure sysctl parameters for Kubernetes networking.

22 - sudo sysctl --system
# Apply the sysctl settings.

23 - kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
# Deploy Flannel network plugin for pod networking.
